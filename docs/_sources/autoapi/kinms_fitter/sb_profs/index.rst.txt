:py:mod:`kinms_fitter.sb_profs`
===============================

.. py:module:: kinms_fitter.sb_profs


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   kinms_fitter.sb_profs.sb_profs




.. py:class:: sb_profs

   Creates flexible surface brightness profiles that can be combined together.

   .. py:class:: expdisk(guesses, minimums, maximums, priors=None, precisions=None, fixed=None)

      Creates an exponentially declining surface brightness profile.     

      Inputs
      ------
      guesses : ndarray of float
          Initial guesses. If a single element, then the disc profile is normalised (peak=1). If two elements then elements should be ['PeakFlux_exp','Rscale_exp']. Rscale units of arcsec.
      minimums  : ndarray of float
          Minimums for the given parameters.
      maximums  : ndarray of float
          Maximums for the given parameters.
      priors : ndarray of objects
          Optional- Priors for the given parameters (see GAStimator priors).
      precisions : ndarray of float
          Optional - Precision you want to reach for the given parameters. [Default = 10 percent of range]
      fixed: ndarray of bool
          Optional - Fix this parameter to the input value in guesses. [Default = All False]

      .. py:method:: __repr__()

         Return repr(self).


      .. py:method:: __call__(x, args)

         Returns the required profile.

         Inputs
         ------
         x : ndarray of float
             Input radial array in arcseconds
         args : ndarray of float
             Input arguments to evalue the profile with




   .. py:class:: gaussian(guesses, minimums, maximums, priors=None, precisions=None, fixed=None)

      Creates an gaussian surface brightness profile.     

      Inputs
      ------
      guesses : ndarray of float
          Initial guesses. If a two elements, then the gaussian profile is normalised (peak=1). If three elements then elements should be ['PeakFlux_gauss','Mean_gauss','sigma_gauss']. Units of mean/sigma are arcsec.
      minimums  : ndarray of float
          Minimums for the given parameters.
      maximums  : ndarray of float
          Maximums for the given parameters.
      priors : ndarray of objects
          Optional- Priors for the given parameters (see GAStimator priors).
      precisions : ndarray of float
          Optional - Precision you want to reach for the given parameters. [Default = 10 percent of range]
      fixed: ndarray of bool
          Optional - Fix this parameter to the input value in guesses. [Default = All False]

      .. py:method:: __repr__()

         Return repr(self).


      .. py:method:: __call__(x, args)

         Returns the required profile.

         Inputs
         ------
         x : ndarray of float
             Input radial array in arcseconds
         args : ndarray of float
             Input arguments to evalue the profile with




   .. py:class:: cutoff(guesses, minimums, maximums, priors=None, precisions=None, fixed=None)

      Creates an cutoff in a surface brightness profile between two radii.     

      Inputs
      ------
      guesses : ndarray of float
          Initial guesses. Two elements ['Start_cutoff','End_cutoff']. Units of arcsec.
      minimums  : ndarray of float
          Minimums for the given parameters.
      maximums  : ndarray of float
          Maximums for the given parameters.
      priors : ndarray of objects
          Optional- Priors for the given parameters (see GAStimator priors).
      precisions : ndarray of float
          Optional - Precision you want to reach for the given parameters. [Default = 10 percent of range]
      fixed: ndarray of bool
          Optional - Fix this parameter to the input value in guesses. [Default = All False]

      .. py:method:: __repr__()

         Return repr(self).


      .. py:method:: __call__(x, args)

         Returns the required profile.

         Inputs
         ------
         x : ndarray of float
             Input radial array in arcseconds
         args : ndarray of float
             Input arguments to evalue the profile with




   .. py:method:: eval(r, params)

      Evaluates a list of surface brightness profiles.

      Inputs
      ------
      modellist : list of objects
          List of sb_prof objects, or objects that have the same methods/inputs.
      r: ndarray of floats
          Radius array, units of arcseconds.
      params: ndarray of floats
          Parameters to use in each model in the list.
      Returns
      -------
      out : ndarray of floats
          Output combined surface brightness profile.



