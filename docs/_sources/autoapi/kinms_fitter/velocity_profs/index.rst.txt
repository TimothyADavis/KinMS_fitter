:py:mod:`kinms_fitter.velocity_profs`
=====================================

.. py:module:: kinms_fitter.velocity_profs


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   kinms_fitter.velocity_profs.velocity_profs




.. py:class:: velocity_profs

   Circular velocity curves from physical and arbitary models that can be combined together.

   .. py:class:: tilted_rings(bincentroids, guesses, minimums, maximums, priors=None, precisions=None, fixed=None)

      Arbitary velocity profile using the tilted ring formalism. 

      Inputs
      ------
      bincentroids: ndarray of float
          Radii at which to constrain the profile. Linearly interpolated between these points.
      guesses : ndarray of float
          Initial guesses. Size of bincentroids, units of km/s.
      minimums  : ndarray of float
          Minimums for the given parameters.
      maximums  : ndarray of float
          Maximums for the given parameters.
      priors : ndarray of objects
          Optional- Priors for the given parameters (see GAStimator priors).
      precisions : ndarray of float
          Optional - Precision you want to reach for the given parameters. [Default = 10 percent of range]
      fixed: ndarray of bool
          Optional - Fix this parameter to the input value in guesses. [Default = All False]

      .. py:method:: __repr__()

         Return repr(self).


      .. py:method:: __call__(x, args, **kwargs)

         Returns the required profile.

         Inputs
         ------
         x : ndarray of float
             Input radial array in arcseconds
         args : ndarray of float
             Input arguments to evalue the profile with




   .. py:class:: keplarian(distance, guesses, minimums, maximums, priors=None, precisions=None, fixed=None)

      Keplarian velocity profile for a point mass at r=0. 

      Inputs
      ------
      distance: ndarray of float
          Distance to the object in Mpc.
      guesses : ndarray of float
          Initial guesses. One element log10 of the central mass (in Msun).
      minimums  : ndarray of float
          Minimums for the given parameter.
      maximums  : ndarray of float
          Maximums for the given parameter.
      priors : ndarray of objects
          Optional- Priors for the given parameter (see GAStimator priors).
      precisions : ndarray of float
          Optional - Precision you want to reach for the given parameter. [Default = 10 percent of range]
      fixed: ndarray of bool
          Optional - Fix this parameter to the input value in guesses. [Default = False]

      .. py:method:: __repr__()

         Return repr(self).


      .. py:method:: __call__(x, args, **kwargs)

         Returns the required profile.

         Inputs
         ------
         x : ndarray of float
             Input radial array in arcseconds
         args : ndarray of float
             Input arguments to evalue the profile with




   .. py:class:: mge_vcirc(surf, sigma, qobs, distance, guesses, minimums, maximums, priors=None, precisions=None, fixed=None)

      Evaulate an MGE model of the potential, with or without a central point mass.  

      Inputs
      ------
      surf : ndarray of float
          Luminosity of each gaussian component, units of Lsun.
      sigma : ndarray of float
          Width of each gaussian, units of arcsec.
      qobs : ndarray of float
          Axial ratio of each gaussian.
      distance: ndarray of float
          Distance to the object in Mpc.
      guesses : ndarray of float
          Initial guesses. One or two elements [M/L and optionally log10_CentralMass in Msun].
      minimums  : ndarray of float
          Minimums for the given parameter.
      maximums  : ndarray of float
          Maximums for the given parameter.
      priors : ndarray of objects
          Optional- Priors for the given parameter (see GAStimator priors).
      precisions : ndarray of float
          Optional - Precision you want to reach for the given parameter. [Default = 10 percent of range]
      fixed: ndarray of bool
          Optional - Fix this parameter to the input value in guesses. [Default = False]

      .. py:method:: __repr__()

         Return repr(self).


      .. py:method:: __call__(x, args, **kwargs)

         Returns the required profile.

         Inputs
         ------
         x : ndarray of float
             Input radial array in arcseconds
         args : ndarray of float
             Input arguments to evalue the profile with




   .. py:class:: arctan(guesses, minimums, maximums, priors=None, precisions=None, fixed=None)

      Arctangent velocity profile. 

      Inputs
      ------
      guesses : ndarray of float
          Initial guesses. Vmax and Rturn in units of km/s and arcseconds.
      minimums  : ndarray of float
          Minimums for the given parameter.
      maximums  : ndarray of float
          Maximums for the given parameter.
      priors : ndarray of objects
          Optional- Priors for the given parameter (see GAStimator priors).
      precisions : ndarray of float
          Optional - Precision you want to reach for the given parameter. [Default = 10 percent of range]
      fixed: ndarray of bool
          Optional - Fix this parameter to the input value in guesses. [Default = False]

      .. py:method:: __repr__()

         Return repr(self).


      .. py:method:: __call__(x, args, **kwargs)

         Returns the required profile.

         Inputs
         ------
         x : ndarray of float
             Input radial array in arcseconds
         args : ndarray of float
             Input arguments to evalue the profile with




   .. py:class:: radial_barflow(guesses, minimums, maximums, priors=None, precisions=None, fixed=None)

      Radial barflow from Spekkens+Sellwood.

      Inputs
      ------
      guesses : ndarray of float
          Initial guesses. Vtangential, Vradial, BarRadius and BarPA in units of km/s, km/s, arcsec, degrees.
      minimums  : ndarray of float
          Minimums for the given parameter.
      maximums  : ndarray of float
          Maximums for the given parameter.
      priors : ndarray of objects
          Optional- Priors for the given parameter (see GAStimator priors).
      precisions : ndarray of float
          Optional - Precision you want to reach for the given parameter. [Default = 10 percent of range]
      fixed: ndarray of bool
          Optional - Fix this parameter to the input value in guesses. [Default = False]

      .. py:method:: __repr__()

         Return repr(self).


      .. py:method:: __call__(x, args, **kwargs)

         Returns the required profile.

         Inputs
         ------
         x : ndarray of float
             Input radial array in arcseconds
         args : ndarray of float
             Input arguments to evalue the profile with




   .. py:class:: sersic(distance, guesses, minimums, maximums, priors=None, precisions=None, fixed=None)

      Velocity curve arising from a sersic mass distribution (spherically symmetric). 

      Inputs
      ------
      distance: float
          Distance to the object in Mpc.
      guesses : ndarray of float
          Initial guesses. Total mass, effective radius and sersic index. Units of log10(Msun), arcsec and unitless.
      minimums  : ndarray of float
          Minimums for the given parameter.
      maximums  : ndarray of float
          Maximums for the given parameter.
      priors : ndarray of objects
          Optional- Priors for the given parameter (see GAStimator priors).
      precisions : ndarray of float
          Optional - Precision you want to reach for the given parameter. [Default = 10 percent of range]
      fixed: ndarray of bool
          Optional - Fix this parameter to the input value in guesses. [Default = False]

      .. py:method:: mass(r, theargs, norm=1)


      .. py:method:: __repr__()

         Return repr(self).


      .. py:method:: __call__(x, theargs, **kwargs)

         Returns the required profile.

         Inputs
         ------
         x : ndarray of float
             Input radial array in arcseconds
         args : ndarray of float
             Input arguments to evalue the profile with




   .. py:class:: bulge_disc(distance, guesses, minimums, maximums, priors=None, precisions=None, fixed=None)

      Velocity curve arising from a combination of a n=4 and n=1 sersic mass distributions (spherically symmetric). 

      Inputs
      ------
      distance: float
          Distance to the object in Mpc.
      guesses : ndarray of float
          Initial guesses. Total mass, effective radius and sersic index. Units of log10(Msun), arcsec and unitless.
      minimums  : ndarray of float
          Minimums for the given parameter.
      maximums  : ndarray of float
          Maximums for the given parameter.
      priors : ndarray of objects
          Optional- Priors for the given parameter (see GAStimator priors).
      precisions : ndarray of float
          Optional - Precision you want to reach for the given parameter. [Default = 10 percent of range]
      fixed: ndarray of bool
          Optional - Fix this parameter to the input value in guesses. [Default = False]

      .. py:method:: __repr__()

         Return repr(self).


      .. py:method:: __call__(x, theargs, **kwargs)

         Returns the required profile.

         Inputs
         ------
         x : ndarray of float
             Input radial array in arcseconds
         args : ndarray of float
             Input arguments to evalue the profile with




   .. py:class:: nfw(distance, guesses, minimums, maximums, priors=None, precisions=None, fixed=None, hubbleconst=68.0)

      Velocity curve arising from an NFW halo. 

      Inputs
      ------
      distance: float
          Distance to the object in Mpc.
      guesses : ndarray of float
          Initial guesses. M200 and concentration. Units of log10(Msun) and unitless.
      minimums  : ndarray of float
          Minimums for the given parameter.
      maximums  : ndarray of float
          Maximums for the given parameter.
      priors : ndarray of objects
          Optional- Priors for the given parameter (see GAStimator priors).
      precisions : ndarray of float
          Optional - Precision you want to reach for the given parameter. [Default = 10 percent of range]
      fixed: ndarray of bool
          Optional - Fix this parameter to the input value in guesses. [Default = False]

      .. py:method:: __repr__()

         Return repr(self).


      .. py:method:: __call__(xs, theargs, **kwargs)

         Returns the required profile.

         Inputs
         ------
         x : ndarray of float
             Input radial array in arcseconds
         args : ndarray of float
             Input arguments to evalue the profile with




   .. py:class:: exponential_disc(distance, guesses, minimums, maximums, priors=None, precisions=None, fixed=None)

      Velocity curve arising from a razor thin exponential disc. Based on eqn 8.74 in "Dynamics and Astrophysics of Galaxies" by Bovy.

      Inputs
      ------
      distance: float
          Distance to the object in Mpc.
      guesses : ndarray of float
          Initial guesses. Mdisk and Scaleradius. Units of log10(Msun) and arcsec.
      minimums  : ndarray of float
          Minimums for the given parameter.
      maximums  : ndarray of float
          Maximums for the given parameter.
      priors : ndarray of objects
          Optional- Priors for the given parameter (see GAStimator priors).
      precisions : ndarray of float
          Optional - Precision you want to reach for the given parameter. [Default = 10 percent of range]
      fixed: ndarray of bool
          Optional - Fix this parameter to the input value in guesses. [Default = False]

      .. py:method:: __repr__()

         Return repr(self).


      .. py:method:: __call__(xs, theargs, **kwargs)

         Returns the required profile.

         Inputs
         ------
         x : ndarray of float
             Input radial array in arcseconds
         args : ndarray of float
             Input arguments to evalue the profile with




   .. py:method:: eval(r, params, inc=90)

      Evaluates a list of velocity_profs objects, returning the total circular velocity profile.

      Inputs
      ------
      modellist : list of objects
          List of sb_prof objects, or objects that have the same methods/inputs.
      r: ndarray of floats
          Radius array, units of arcseconds.
      params: ndarray of floats
          Parameters to use in each model in the list.
      inc: float
          Inclination of system, in degrees.



